# name: Create AWS Resources for Flask App

# on:
#   push:
#     branches:
#       - master  # Trigger when pushing to the main branch

# jobs:
#   create-ec2-resources:
#     name: Create EC2 and related resources
#     runs-on: ubuntu-latest
#     env:
#       GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Provide authentication for GitHub CLI

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Setup AWS CLI
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-west-2

#       - name: Check if Key Pair exists
#         id: keypair-check
#         run: |
#           KEY_PAIR_NAME="${{ secrets.KEY_PAIR_NAME }}"
#           EXISTING_KEY=$(aws ec2 describe-key-pairs --key-names $KEY_PAIR_NAME --query 'KeyPairs[0].KeyName' --output text || echo "")
#           if [ -z "$EXISTING_KEY" ]; then
#             echo "Creating new Key Pair..."
#             aws ec2 create-key-pair --key-name $KEY_PAIR_NAME --query 'KeyMaterial' --output text > ${KEY_PAIR_NAME}.pem
#             chmod 400 ${KEY_PAIR_NAME}.pem || exit 1
#             echo "KEY_PAIR_FILE=${KEY_PAIR_NAME}.pem" >> $GITHUB_ENV
#             echo "Adding private key to GitHub secrets..."
#             gh secret set EC2_SSH_KEY < ${KEY_PAIR_NAME}.pem || echo "Failed to add secret"
#           fi

#       - name: Check if Security Group exists
#         id: sg-check
#         run: |
#           SECURITY_GROUP_NAME="FlaskAppSG"
#           EXISTING_SG=$(aws ec2 describe-security-groups --group-names $SECURITY_GROUP_NAME --query 'SecurityGroups[0].GroupId' --output text || echo "")
#           if [ -z "$EXISTING_SG" ]; then
#             SG_ID=$(aws ec2 create-security-group --group-name $SECURITY_GROUP_NAME --description "Security group for Flask app" --output text)
#             echo "SG_ID=${SG_ID}" >> $GITHUB_ENV
#             aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 22 --cidr 0.0.0.0/0  # Allow SSH
#             aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0  # Allow HTTP
#           else
#             echo "SG_ID=${EXISTING_SG}" >> $GITHUB_ENV
#           fi

#       - name: Find Amazon Linux 2 AMI ID
#         id: ami-find
#         run: |
#           AMI_ID=$(aws ec2 describe-images --owners amazon --filters "Name=name,Values=amzn2-ami-hvm-*-x86_64-gp2" "Name=architecture,Values=x86_64" --query "Images[?contains(Name, 'amzn2-ami-hvm-')].[ImageId]" --output text | head -n 1)
#           echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV

#       - name: Create EC2 Instance
#         id: ec2-create
#         run: |
#           INSTANCE_ID=$(aws ec2 run-instances \
#             --image-id ${{ env.AMI_ID }} \
#             --instance-type t2.micro \
#             --key-name ${{ secrets.KEY_PAIR_NAME }} \
#             --security-group-ids ${{ env.SG_ID }} \
#             --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=FlaskApp}]' \
#             --query "Instances[0].InstanceId" \
#             --output text)
#           echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV

#       - name: Wait for EC2 instance to be running
#         run: |
#           aws ec2 wait instance-running --instance-ids ${{ env.INSTANCE_ID }}

#       - name: Get EC2 public DNS
#         id: ec2-dns
#         run: |
#           PUBLIC_DNS=$(aws ec2 describe-instances --instance-ids ${{ env.INSTANCE_ID }} --query "Reservations[*].Instances[*].PublicDnsName" --output text)
#           echo "PUBLIC_DNS=${PUBLIC_DNS}" >> $GITHUB_ENV

#       - name: Output EC2 public DNS
#         run: echo "EC2 instance is running with public DNS: ${{ env.PUBLIC_DNS }}"
