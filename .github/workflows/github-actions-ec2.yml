name: Deploy Flask App to EC2

on:
  push:
    branches:
      - master  # Trigger when pushing to the main branch

jobs:
  create-ec2-deploy:
    name: Create EC2 and Deploy Flask App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} 
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check if Key Pair exists
        id: keypair-check
        run: |
          KEY_PAIR_NAME="MyKeyPair"
          EXISTING_KEY=$(aws ec2 describe-key-pairs --key-names $KEY_PAIR_NAME --query 'KeyPairs[0].KeyName' --output text || echo "")
          if [ -z "$EXISTING_KEY" ]; then
            aws ec2 create-key-pair --key-name $KEY_PAIR_NAME --query 'KeyMaterial' --output text > ${KEY_PAIR_NAME}.pem
            chmod 400 ${KEY_PAIR_NAME}.pem
            echo "::add-mask::$(cat ${KEY_PAIR_NAME}.pem)" # Mask the key in logs
            echo "KEY_PAIR=${KEY_PAIR_NAME}" >> $GITHUB_ENV  # Save KEY_PAIR variable
            echo "KEY_MATERIAL=$(cat ${KEY_PAIR_NAME}.pem)" >> $GITHUB_ENV # Save key material
          else
            echo "KEY_PAIR=${KEY_PAIR_NAME}" >> $GITHUB_ENV
          fi

      - name: Check if Security Group exists
        id: sg-check
        run: |
          SECURITY_GROUP_NAME="FlaskAppSG"
          EXISTING_SG=$(aws ec2 describe-security-groups --group-names $SECURITY_GROUP_NAME --query 'SecurityGroups[0].GroupId' --output text || echo "")
          if [ -z "$EXISTING_SG" ]; then
            SG_ID=$(aws ec2 create-security-group --group-name $SECURITY_GROUP_NAME --description "Security group for Flask app" --output text)
            echo "SG_ID=${SG_ID}" >> $GITHUB_ENV
            aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 22 --cidr 0.0.0.0/0  # Allow SSH
            aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0  # Allow HTTP
          else
            echo "SG_ID=${EXISTING_SG}" >> $GITHUB_ENV
          fi

      - name: Check if EC2 instance exists
        id: ec2-check
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=FlaskApp" --query "Reservations[*].Instances[*].InstanceId" --output text)
          echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV

      - name: Find Amazon Linux 2 AMI ID
        id: ami-find
        run: |
          AMI_ID=$(aws ec2 describe-images --owners amazon --filters "Name=name,Values=amzn2-ami-hvm-*-x86_64-gp2" "Name=architecture,Values=x86_64" --query "Images[?contains(Name, 'amzn2-ami-hvm-')].[ImageId]" --output text | head -n 1)
          echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV

      - name: Create EC2 Instance if Not Exists
        if: env.INSTANCE_ID == ''
        id: ec2-create
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ${{ env.AMI_ID }} \
            --instance-type t2.micro \
            --key-name ${{ env.KEY_PAIR }} \
            --security-group-ids ${{ env.SG_ID }} \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=FlaskApp}]' \
            --query "Instances[0].InstanceId" \
            --output text)
          echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV

      - name: Wait for EC2 instance to be running
        run: |
          aws ec2 wait instance-running --instance-ids ${{ env.INSTANCE_ID }}

      - name: Get EC2 public DNS
        id: ec2-dns
        run: |
          PUBLIC_DNS=$(aws ec2 describe-instances --instance-ids ${{ env.INSTANCE_ID }} --query "Reservations[*].Instances[*].PublicDnsName" --output text)
          echo "PUBLIC_DNS=${PUBLIC_DNS}" >> $GITHUB_ENV

      - name: Install Python, Gunicorn, Nginx and Setup Flask App
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.PUBLIC_DNS }}
          username: ec2-user  # Adjust depending on your AMI
          key: ${{ env.KEY_MATERIAL }}  # Using the generated key material
          script: |
            sudo yum update -y
            sudo yum install python3 -y
            sudo amazon-linux-extras install nginx1 -y
            sudo pip3 install gunicorn flask
            sudo systemctl start nginx
            sudo systemctl enable nginx
            
            # Create a folder for Flask app
            mkdir -p /home/ec2-user/flaskapp
            cd /home/ec2-user/flaskapp
            
            # Deploy your Flask app
            cat << 'EOF' > /home/ec2-user/flaskapp/app.py
            from flask import Flask, render_template
            import json
            import random
            
            app = Flask(__name__)
            
            def get_random_pokemon():
                with open("Pokemons.json", "r") as file:
                    pokemons = json.load(file)
                    return random.choice(pokemons)
            
            @app.route("/")
            def index():
                random_pokemon = get_random_pokemon()
                return render_template("index.html", pokemon=random_pokemon)
            
            if __name__ == "__main__":
                app.run(host="0.0.0.0")
            EOF

            # Create systemd service for Gunicorn
            echo "[Unit]
            Description=Gunicorn instance to serve flaskapp
            After=network.target

            [Service]
            User=ec2-user
            Group=nginx
            WorkingDirectory=/home/ec2-user/flaskapp
            ExecStart=/usr/local/bin/gunicorn --workers 3 --bind unix:/home/ec2-user/flaskapp/flaskapp.sock -m 007 app:app

            [Install]
            WantedBy=multi-user.target" | sudo tee /etc/systemd/system/flaskapp.service
                        
            # Start Gunicorn service
            sudo systemctl start flaskapp
            sudo systemctl enable flaskapp
                        
            # Configure Nginx
            echo 'server {
                listen 80;
                server_name '${{ env.PUBLIC_DNS }}';
                location / {
                    include proxy_params;
                    proxy_pass http://unix:/home/ec2-user/flaskapp/flaskapp.sock;
                }
            }' | sudo tee /etc/nginx/conf.d/flaskapp.conf
                        
            sudo nginx -t
            sudo systemctl restart nginx
