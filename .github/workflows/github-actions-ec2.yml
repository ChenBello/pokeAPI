name: Deploy Flask App to EC2

on:
  push:
    branches:
      - master  # Trigger when pushing to the main branch
jobs:
  create-ec2-deploy:
    name: Create EC2 and Deploy Flask App
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Add this line to provide authentication for GitHub CLI

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Other steps
      
      - name: Check GitHub CLI installation
        run: |
          gh --version

      - name: Check if Key Pair exists
        id: keypair-check
        run: |
          KEY_PAIR_NAME="${{ secrets.KEY_PAIR_NAME }}"
          EXISTING_KEY=$(aws ec2 describe-key-pairs --key-names $KEY_PAIR_NAME --query 'KeyPairs[0].KeyName' --output text || echo "")
          if [ -z "$EXISTING_KEY" ]; then
            echo "Creating new Key Pair..."
            aws ec2 create-key-pair --key-name $KEY_PAIR_NAME --query 'KeyMaterial' --output text > ${KEY_PAIR_NAME}.pem
            if [ $? -ne 0 ]; then
              echo "Failed to create Key Pair" >&2
              exit 1
            fi
            chmod 400 ${KEY_PAIR_NAME}.pem || exit 1
            echo "KEY_PAIR_FILE=${KEY_PAIR_NAME}.pem" >> $GITHUB_ENV

            # Save the private key as a GitHub secret
            echo "Adding private key to GitHub secrets..."
            gh secret set EC2_SSH_KEY < ${KEY_PAIR_NAME}.pem || echo "Failed to add secret"
          fi


      # - name: Check if Key Pair exists
      #   id: keypair-check
      #   run: |
      #     KEY_PAIR_NAME="${{ secrets.KEY_PAIR_NAME }}"
      #     EXISTING_KEY=$(aws ec2 describe-key-pairs --key-names $KEY_PAIR_NAME --query 'KeyPairs[0].KeyName' --output text || echo "")
      #     if [ -z "$EXISTING_KEY" ]; then
      #       echo "Creating new Key Pair..."
      #       aws ec2 create-key-pair --key-name $KEY_PAIR_NAME --query 'KeyMaterial' --output text > ${KEY_PAIR_NAME}.pem
      #       chmod 400 ${KEY_PAIR_NAME}.pem
      #       echo "KEY_PAIR_FILE=${KEY_PAIR_NAME}.pem" >> $GITHUB_ENV

      #       echo "Adding private key to GitHub secrets..."
      #       gh secret set EC2_SSH_KEY < ${KEY_PAIR_NAME}.pem
      #     fi

      - name: Check if EC2 instance exists
        id: ec2-check
        run: |
            INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=FlaskApp" --query "Reservations[*].Instances[*].InstanceId" --output text)
            if [ -n "$INSTANCE_ID" ]; then
              echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV
            fi

      - name: Check if Security Group exists
        id: sg-check
        run: |
          SECURITY_GROUP_NAME="FlaskAppSG"
          EXISTING_SG=$(aws ec2 describe-security-groups --group-names $SECURITY_GROUP_NAME --query 'SecurityGroups[0].GroupId' --output text || echo "")
          if [ -z "$EXISTING_SG" ]; then
            SG_ID=$(aws ec2 create-security-group --group-name $SECURITY_GROUP_NAME --description "Security group for Flask app" --output text)
            echo "SG_ID=${SG_ID}" >> $GITHUB_ENV
            aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 22 --cidr 0.0.0.0/0  # Allow SSH
            aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0  # Allow HTTP
          else
            echo "SG_ID=${EXISTING_SG}" >> $GITHUB_ENV
          fi

      - name: Find Amazon Linux 2 AMI ID
        id: ami-find
        run: |
          AMI_ID=$(aws ec2 describe-images --owners amazon --filters "Name=name,Values=amzn2-ami-hvm-*-x86_64-gp2" "Name=architecture,Values=x86_64" --query "Images[?contains(Name, 'amzn2-ami-hvm-')].[ImageId]" --output text | head -n 1)
          echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV

      - name: Create EC2 Instance if Not Exists
        if: env.INSTANCE_ID == ''
        id: ec2-create
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ${{ env.AMI_ID }} \
            --instance-type t2.micro \
            --key-name ${{ secrets.KEY_PAIR_NAME }} \
            --security-group-ids ${{ env.SG_ID }} \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=FlaskApp}]' \
            --query "Instances[0].InstanceId" \
            --output text)
          echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV

      - name: Wait for EC2 instance to be running
        run: |
          aws ec2 wait instance-running --instance-ids ${{ env.INSTANCE_ID }}

      - name: Get EC2 public DNS
        id: ec2-dns
        run: |
          PUBLIC_DNS=$(aws ec2 describe-instances --instance-ids ${{ env.INSTANCE_ID }} --query "Reservations[*].Instances[*].PublicDnsName" --output text)
          echo "PUBLIC_DNS=${PUBLIC_DNS}" >> $GITHUB_ENV
          
      - name: Generate SSH Key
        run: |
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
          echo "SSH Key generated."
          
      # Setting 700 to .ssh and 600 to authorized_keys solved the issue.
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

      # - name: Add SSH public key to authorized_keys
      #   run: |
      #     echo "${{ secrets.EC2_SSH_PUBLIC_KEY }}" >> ~/.ssh/authorized_keys
      #     chmod 600 ~/.ssh/authorized_keys

      - name: Generate SSH Key
        run: |
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
          echo "SSH Key generated."
          echo "${{ secrets.EC2_SSH_PUBLIC_KEY }}" >> ~/.ssh/authorized_keys
          chmod 600 ~/.ssh/authorized_keys

      - name: Connect via SSH and deploy Flask app
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -v ec2-user@${{ env.PUBLIC_DNS }} << 'EOF'
            sudo yum update -y
            sudo yum install python3 python3-devel git -y
            sudo yum install nginx -y
            sudo pip3 install flask gunicorn
            mkdir -p ~/flaskapp
            cd ~/flaskapp
            git clone https://github.com/ChenBello/pokeAPI.git .  # Replace with your repo
            sudo systemctl start nginx
            sudo systemctl enable nginx
            sudo touch /etc/systemd/system/flaskapp.service
            echo "[Unit]
            Description=Gunicorn instance to serve flaskapp
            After=network.target

            [Service]
            User=ec2-user
            Group=nginx
            WorkingDirectory=/home/ec2-user/flaskapp
            ExecStart=/usr/local/bin/gunicorn --workers 3 --bind unix:/home/ec2-user/flaskapp/flaskapp.sock -m 007 app:app

            [Install]
            WantedBy=multi-user.target" | sudo tee /etc/systemd/system/flaskapp.service
            sudo systemctl start flaskapp
            sudo systemctl enable flaskapp
            echo 'server {
                listen 80;
                server_name ${PUBLIC_DNS};
                location / {
                    include proxy_params;
                    proxy_pass http://unix:/home/ec2-user/flaskapp/flaskapp.sock;
                }
            }' | sudo tee /etc/nginx/conf.d/flaskapp.conf
            sudo nginx -t
            sudo systemctl restart nginx
          EOF

      # - name: Connect via SSH and deploy Flask app
      #   run: |
      #     ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ env.PUBLIC_DNS }} << 'EOF'
      #       sudo yum update -y
      #       sudo yum install python3 python3-devel git -y
      #       sudo yum install nginx -y
      #       sudo pip3 install flask gunicorn
      #       mkdir -p ~/flaskapp
      #       cd ~/flaskapp
      #       git clone https://github.com/ChenBello/pokeAPI.git .  # Replace with your repo
      #       sudo systemctl start nginx
      #       sudo systemctl enable nginx
      #       sudo touch /etc/systemd/system/flaskapp.service
      #       echo "[Unit]
      #       Description=Gunicorn instance to serve flaskapp
      #       After=network.target

      #       [Service]
      #       User=ec2-user
      #       Group=nginx
      #       WorkingDirectory=/home/ec2-user/flaskapp
      #       ExecStart=/usr/local/bin/gunicorn --workers 3 --bind unix:/home/ec2-user/flaskapp/flaskapp.sock -m 007 app:app

      #       [Install]
      #       WantedBy=multi-user.target" | sudo tee /etc/systemd/system/flaskapp.service
      #       sudo systemctl start flaskapp
      #       sudo systemctl enable flaskapp
      #       echo 'server {
      #           listen 80;
      #           server_name ${PUBLIC_DNS};
      #           location / {
      #               include proxy_params;
      #               proxy_pass http://unix:/home/ec2-user/flaskapp/flaskapp.sock;
      #           }
      #       }' | sudo tee /etc/nginx/conf.d/flaskapp.conf
      #       sudo nginx -t
      #       sudo systemctl restart nginx
      #     EOF

      # - name: Test if the app is running
      #   run: |
      #     curl -I http://${{ env.PUBLIC_DNS }}

      # - name: Add usage instructions on login
      #   run: |
      #     echo "Welcome to your Flask app server. To restart the app, use 'sudo systemctl restart flaskapp'." | sudo tee /etc/motd
