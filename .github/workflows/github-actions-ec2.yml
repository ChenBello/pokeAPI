name: Deploy Flask App to EC2

on:
  push:
    branches:
      - master  # Trigger when pushing to the main branch

jobs:
  create-ec2-deploy:
    name: Create EC2 and Deploy Flask App
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Provide authentication for GitHub CLI

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-west-2

      - name: Check if Key Pair exists
        id: keypair-check
        run: |
          KEY_PAIR_NAME="${{ secrets.KEY_PAIR_NAME }}"
          EXISTING_KEY=$(aws ec2 describe-key-pairs --key-names $KEY_PAIR_NAME --query 'KeyPairs[0].KeyName' --output text || echo "")
          if [ -z "$EXISTING_KEY" ]; then
            echo "Creating new Key Pair..."
            aws ec2 create-key-pair --key-name $KEY_PAIR_NAME --query 'KeyMaterial' --output text > ${KEY_PAIR_NAME}.pem
            chmod 400 ${KEY_PAIR_NAME}.pem || exit 1
            echo "KEY_PAIR_FILE=${KEY_PAIR_NAME}.pem" >> $GITHUB_ENV
            echo "Adding private key to GitHub secrets..."
            gh secret set EC2_SSH_KEY < ${KEY_PAIR_NAME}.pem || echo "Failed to add secret"
           else
            echo "Using existing key pair: ${EXISTING_KEY}"
            echo "KEY_PAIR_NAME=${EXISTING_KEY}.pem" >> $GITHUB_ENV
          fi
      
      - name: Store EC2 private key in secrets for SSH
        run: |
          echo "${{ env.KEY_PAIR_NAME }}" > /tmp/ec2_key.pem
          chmod 400 /tmp/ec2_key.pem
          echo "Private key stored and ready for SSH."


      - name: Check if EC2 instance exists
        id: ec2-check
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=PokeAPI" --query "Reservations[*].Instances[*].InstanceId" --output text)
          if [ -n "$INSTANCE_ID" ]; then
            echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV
          fi

      - name: Check if Security Group exists
        id: sg-check
        run: |
          SECURITY_GROUP_NAME="PokeAPI-SG"
          EXISTING_SG=$(aws ec2 describe-security-groups --group-names $SECURITY_GROUP_NAME --query 'SecurityGroups[0].GroupId' --output text || echo "")
          if [ -z "$EXISTING_SG" ]; then
            SG_ID=$(aws ec2 create-security-group --group-name $SECURITY_GROUP_NAME --description "Security group for Flask app" --output text)
            echo "SG_ID=${SG_ID}" >> $GITHUB_ENV
            aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 22 --cidr 0.0.0.0/0  # Allow SSH
            aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0  # Allow HTTP
          else
            echo "SG_ID=${EXISTING_SG}" >> $GITHUB_ENV
          fi

      - name: Find Amazon Linux 2 AMI ID
        id: ami-find
        run: |
          AMI_ID=$(aws ec2 describe-images --owners amazon --filters "Name=name,Values=amzn2-ami-hvm-*-x86_64-gp2" "Name=architecture,Values=x86_64" --query "Images[?contains(Name, 'amzn2-ami-hvm-')].[ImageId]" --output text | head -n 1)
          echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV

      - name: Create EC2 Instance if Not Exists
        if: env.INSTANCE_ID == ''
        id: ec2-create
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ${{ env.AMI_ID }} \
            --instance-type t2.micro \
            --key-name ${{ secrets.KEY_PAIR_NAME }} \
            --security-group-ids ${{ env.SG_ID }} \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=PokeAPI}]' \
            --query "Instances[0].InstanceId" \
            --output text)
          echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV

      - name: Wait for EC2 instance to be running
        run: |
          aws ec2 wait instance-running --instance-ids ${{ env.INSTANCE_ID }}

      - name: Get EC2 public DNS
        id: ec2-dns
        run: |
          PUBLIC_DNS=$(aws ec2 describe-instances --instance-ids ${{ env.INSTANCE_ID }} --query "Reservations[*].Instances[*].PublicDnsName" --output text)
          echo "PUBLIC_DNS=${PUBLIC_DNS}" >> $GITHUB_ENV

      - name: Store EC2 private key in secrets for SSH
        run: |
          echo "${{ env.KEY_PAIR_NAME }}" > /tmp/ec2_key.pem
          chmod 400 /tmp/ec2_key.pem
          echo "Private key stored and ready for SSH."

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
            ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Run setup script for Flask app
        run: |
          # ssh -tt -o StrictHostKeyChecking=no ec2-user@${{ env.PUBLIC_DNS }} << 'EOF'
          ssh -i /tmp/ec2_key.pem ec2-user@${{ env.PUBLIC_DNS }} << 'EOF'
          echo "Connected to EC2 Instance"
          sudo yum update -y
          sudo yum install python3 python3-devel git nginx -y
          sudo pip3 install flask gunicorn

          ssh-keygen -t rsa -b 4096 -c "chenbello3@gmail.com"
          PUBLIC_KEY=$(cat ~/.ssh/id_rsa.pub)
          echo "PUBLIC_KEY=${PUBLIC_KEY}" >> $GITHUB_ENV
          gh secret set PUBLIC_KEY < ${PUBLIC_KEY} || echo "Failed to add secret"
          
          # Clone the application
          if [ ! -d "/home/ec2-user/PokeAPI" ]; then
            git clone https://github.com/ChenBello/pokeAPI.git /home/ec2-user/PokeAPI
          else
            cd /home/ec2-user/PokeAPI && git pull origin master
          fi

          # Set up Gunicorn service
          sudo tee /etc/systemd/system/PokeAPI.service > /dev/null <<EOL
          [Unit]
          Description=Gunicorn instance to serve PokeAPI
          After=network.target

          [Service]
          User=ec2-user
          Group=nginx
          WorkingDirectory=/home/ec2-user/PokeAPI
          ExecStart=/usr/local/bin/gunicorn --workers 3 --bind unix:/home/ec2-user/PokeAPI/PokeAPI.sock -m 007 app:app

          [Install]
          WantedBy=multi-user.target
          EOL

          sudo systemctl start PokeAPI
          sudo systemctl enable PokeAPI

          # Configure Nginx
          sudo tee /etc/nginx/conf.d/PokeAPI.conf > /dev/null <<EOL
          server {
              listen 80;
              server_name ${PUBLIC_DNS};

              location / {
                  include proxy_params;
                  proxy_pass http://unix:/home/ec2-user/PokeAPI/PokeAPI.sock;
              }
          }
          EOL

          sudo nginx -t
          sudo systemctl restart nginx

          # Add welcome message to .bashrc
          echo "Welcome to the Pokémon app! Type 'python3 app.py' to start drawing Pokémon." >> ~/.bashrc

          EOF

      - name: Test if the app is running
        run: |
          curl -I http://${{ env.PUBLIC_DNS }} || echo "Failed to connect to the app"

      # - name: Set up SSH
      #   run: |
      #     command -v ssh-agent >/dev/null || ( sudo apt-get update -y && sudo apt-get install openssh-client -y )
      #     eval $(ssh-agent -s)
      #     mkdir -p ~/.ssh
      #     chmod 700 ~/.ssh
      #     echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
      #     chmod 600 ~/.ssh/id_rsa
      #     touch ~/.ssh/config
      #     touch ~/.ssh/known_hosts
      #     chmod 644 ~/.ssh/config
      #     chmod 644 ~/.ssh/known_hosts
      #     ssh-keyscan -H ${{ env.PUBLIC_DNS }} >> ~/.ssh/known_hosts
      #     echo -e "Host *\n\tStrictHostKeyChecking no\n\n" >> ~/.ssh/config
     
      
      # - name: Set up SSH
      #   uses: webfactory/ssh-agent@v0.7.0
      #   with:
      #       ssh-private-key: ${{ secrets.EC2_SSH_KEY }}
    
      # - name: Deploy app to EC2
      #   run: |
      #       ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
      #         cd ~/PokeAPI  # הנתיב שבו שוכנת האפליקציה על EC2
      #         git pull origin main  # משוך את העדכונים האחרונים
      #         pip3 install -r requirements.txt  # עדכן חבילות אם צריך
      #         pkill -f app.py  # עצור את האפליקציה אם היא כבר רצה
      #         nohup python3 app.py &  # הרץ מחדש את Flask ברקע
      #       EOF
      # - name: Run setup script for Flask app
      #   run: |
      #     ssh -tt -o StrictHostKeyChecking=no ec2-user@${{ env.PUBLIC_DNS }} << 'EOF'
      #     echo "Updating and installing required packages..."
      #     sudo apt update -y
      #     sudo apt install python3 python3-pip git -y
      #     echo "Installing Flask..."
      #     pip3 install flask requests
      #     echo "Cloning the application from GitHub..."
      #     git clone https://github.com/ChenBello/pokeAPI.git  # החלף בכתובת GitHub שלך
      #     cd PokeAPI
      #     echo "Starting the Flask application..."
      #     nohup python3 app.py &
      #     echo "The application is up and running!"
      #     EOF

      # - name: Connect via SSH and configure Flask app
      #   run: |
      #     ssh -tt -o StrictHostKeyChecking=no ec2-user@${{ env.PUBLIC_DNS }} << 'EOF'
      #     echo "Connected to EC2 Instance"
      #     sudo yum update -y
      #     sudo yum install python3 python3-devel git -y
      #     sudo yum install nginx -y
      #     sudo pip3 install flask gunicorn
      #     mkdir -p ~/PokeAPI
      #     cd ~/PokeAPI
      #     git clone https://github.com/ChenBello/pokeAPI.git .  # Replace with your repo
      #     sudo systemctl start nginx
      #     sudo systemctl enable nginx
      #     sudo touch /etc/systemd/system/PokeAPI.service
      #     echo "[Unit]
      #     Description=Gunicorn instance to serve PokeAPI
      #     After=network.target
      #     echo "Welcome to the Pokémon app! Type 'python3 app.py' to start drawing Pokémon." >> ~/.bashrc


      #     [Service]
      #     User=ec2-user
      #     Group=nginx
      #     WorkingDirectory=/home/ec2-user/PokeAPI
      #     ExecStart=/usr/local/bin/gunicorn --workers 3 --bind unix:/home/ec2-user/PokeAPI/PokeAPI.sock -m 007 app:app

      #     [Install]
      #     WantedBy=multi-user.target" | sudo tee /etc/systemd/system/PokeAPI.service
      #     sudo systemctl start PokeAPI
      #     sudo systemctl enable PokeAPI
      #     echo 'server {
      #         listen 80;
      #         server_name '${{ env.PUBLIC_DNS }}';
      #         location / {
      #             include proxy_params;
      #             proxy_pass http://unix:/home/ec2-user/PokeAPI/PokeAPI.sock;
      #         }
      #     }' | sudo tee /etc/nginx/conf.d/PokeAPI.conf
      #     sudo nginx -t
      #     sudo systemctl restart nginx
      #     EOF

      # - name: Test if the app is running
      #   run: |
      #     curl -I http://${{ env.PUBLIC_DNS }} || echo "Failed to connect to the app"

      # - name: Add usage instructions on login
      #   run: |
      #     echo "Welcome to your Flask app server. To restart the app, use 'sudo systemctl restart PokeAPI
