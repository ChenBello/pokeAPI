name: Deploy Flask App to EC2

on:
  push:
    branches:
      - master  # Trigger when pushing to the main branch

jobs:
  create-ec2-deploy:
    name: Create EC2 and Deploy Flask App
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Provide authentication for GitHub CLI

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-west-2

      - name: Check if Key Pair exists
        id: keypair-check
        run: |
          KEY_PAIR_NAME="${{ secrets.KEY_PAIR_NAME }}"
          EXISTING_KEY=$(aws ec2 describe-key-pairs --key-names $KEY_PAIR_NAME --query 'KeyPairs[0].KeyName' --output text || echo "")
          if [ -z "$EXISTING_KEY" ]; then
              echo "Key Pair does not exist. Consider creating one."
              exit 1  # Fail the job if the key pair does not exist
          else
              echo "Using existing key pair: ${EXISTING_KEY}"
          fi

      - name: Check if EC2 instance exists
        id: ec2-check
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=PokeAPI" --query "Reservations[*].Instances[*].InstanceId" --output text)
          if [ -n "$INSTANCE_ID" ]; then
            echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV
          fi

      - name: Check if Security Group exists
        id: sg-check
        run: |
          SECURITY_GROUP_NAME="PokeAPI-SG"
          EXISTING_SG=$(aws ec2 describe-security-groups --group-names $SECURITY_GROUP_NAME --query 'SecurityGroups[0].GroupId' --output text || echo "")
          if [ -z "$EXISTING_SG" ]; then
            SG_ID=$(aws ec2 create-security-group --group-name $SECURITY_GROUP_NAME --description "Security group for Flask app" --output text)
            echo "SG_ID=${SG_ID}" >> $GITHUB_ENV
            aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 22 --cidr 0.0.0.0/0  # Allow SSH
            aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0  # Allow HTTP
          else
            echo "SG_ID=${EXISTING_SG}" >> $GITHUB_ENV
          fi

      - name: Find Amazon Linux 2 AMI ID
        id: ami-find
        run: |
          AMI_ID=$(aws ec2 describe-images --owners amazon --filters "Name=name,Values=amzn2-ami-hvm-*-x86_64-gp2" "Name=architecture,Values=x86_64" --query "Images[?contains(Name, 'amzn2-ami-hvm-')].[ImageId]" --output text | head -n 1)
          echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV

      - name: Create EC2 Instance if Not Exists
        if: env.INSTANCE_ID == ''
        id: ec2-create
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ${{ env.AMI_ID }} \
            --instance-type t2.micro \
            --key-name ${{ secrets.KEY_PAIR_NAME }} \
            --security-group-ids ${{ env.SG_ID }} \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=PokeAPI}]' \
            --query "Instances[0].InstanceId" \
            --output text)
          echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV

      - name: Wait for EC2 instance to be running
        run: |
          aws ec2 wait instance-running --instance-ids ${{ env.INSTANCE_ID }}

      - name: Get EC2 public DNS
        id: ec2-dns
        run: |
          PUBLIC_DNS=$(aws ec2 describe-instances --instance-ids ${{ env.INSTANCE_ID }} --query "Reservations[*].Instances[*].PublicDnsName" --output text)
          echo "PUBLIC_DNS=${PUBLIC_DNS}" >> $GITHUB_ENV

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Add EC2 to known_hosts
        run: ssh-keyscan -H ${{ env.PUBLIC_DNS }} >> ~/.ssh/known_hosts

      - name: Run setup script for Flask app
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_KEY }} ec2-user@${{ env.PUBLIC_DNS }} << 'EOF'
          sudo yum update -y
          sudo yum install python3 python3-devel git nginx -y
          sudo pip3 install flask gunicorn
          
          if [ ! -d "/home/ec2-user/PokeAPI" ]; then
            git clone https://github.com/ChenBello/pokeAPI.git /home/ec2-user/PokeAPI
          else
            cd /home/ec2-user/PokeAPI && git pull origin master
          fi

          sudo tee /etc/systemd/system/PokeAPI.service > /dev/null <<EOL
          [Unit]
          Description=Gunicorn instance to serve PokeAPI
          After=network.target

          [Service]
          User=ec2-user
          Group=nginx
          WorkingDirectory=/home/ec2-user/PokeAPI
          ExecStart=/usr/local/bin/gunicorn --workers 3 --bind unix:/home/ec2-user/PokeAPI/PokeAPI.sock -m 007 app:app

          [Install]
          WantedBy=multi-user.target
          EOL

          sudo systemctl start PokeAPI
          sudo systemctl enable PokeAPI

          sudo tee /etc/nginx/conf.d/PokeAPI.conf > /dev/null <<EOL
          server {
              listen 80;
              server_name ${PUBLIC_DNS};

              location / {
                  include proxy_params;
                  proxy_pass http://unix:/home/ec2-user/PokeAPI/PokeAPI.sock;
              }
          }
          EOL

          sudo nginx -t
          sudo systemctl restart nginx

          echo "Welcome to the Pokémon app! Type 'python3 app.py' to start drawing Pokémon." >> ~/.bashrc
          EOF

      - name: Test if the app is running
        run: |
          curl -I http://${{ env.PUBLIC_DNS }} || echo "Failed to connect to the app"
