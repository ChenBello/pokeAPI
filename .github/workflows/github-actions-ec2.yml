name: Deploy Flask App to EC2

on:
  push:
    branches:
      - master  # Trigger when pushing to the main branch

jobs:
  create-ec2-deploy:
    name: Create EC2 and Deploy Flask App
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-west-2
      SECURITY_GROUP_NAME: "PokeAPI-SG"
      INSTANCE_TAG: "PokeAPI"
      IAM_USER_NAME: "PokeAPIUser"
      APP_DIR: "/home/ec2-user/PokeAPI"
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Provide authentication for GitHub CLI

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check if Key Pair exists
        id: keypair-check
        run: |
          KEY_PAIR_NAME="${{ secrets.KEY_PAIR_NAME }}"
          aws ec2 describe-key-pairs --key-names $KEY_PAIR_NAME --query 'KeyPairs[0].KeyName' --output text || { echo "Key Pair does not exist."; exit 1; }

      - name: Check and create Security Group
        id: sg-check
        run: |
          EXISTING_SG=$(aws ec2 describe-security-groups --group-names ${{ env.SECURITY_GROUP_NAME }} --query 'SecurityGroups[0].GroupId' --output text || echo "")
          if [ -z "$EXISTING_SG" ]; then
            SG_ID=$(aws ec2 create-security-group --group-name ${{ env.SECURITY_GROUP_NAME }} --description "Security group for Flask app" --output text)
            aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 22 --cidr 0.0.0.0/0  # Allow SSH
            aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0  # Allow HTTP
            echo "Created Security Group with ID: $SG_ID"
          else
            echo "Using existing Security Group: ${EXISTING_SG}"
            SG_ID=$EXISTING_SG
          fi
          
      - name: Find or create EC2 Instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ env.INSTANCE_TAG }}" --query "Reservations[*].Instances[*].InstanceId" --output text || echo "")
          if [ -z "$INSTANCE_ID" ]; then
            INSTANCE_ID=$(aws ec2 run-instances --image-id $(aws ec2 describe-images --owners amazon --filters "Name=name,Values=amzn2-ami-hvm-*-x86_64-gp2" --query "Images[0].ImageId" --output text) --instance-type t2.micro --key-name ${{ secrets.KEY_PAIR_NAME }} --security-group-ids $SG_ID --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=${{ env.INSTANCE_TAG }}]}" --query "Instances[0].InstanceId" --output text)
            echo "Created new EC2 Instance with ID: $INSTANCE_ID"
          else
            echo "Using existing EC2 Instance: $INSTANCE_ID"
          fi

      - name: Wait for EC2 instance to be running
        run: aws ec2 wait instance-running --instance-ids $INSTANCE_ID

      - name: Get EC2 public DNS
        id: ec2-dns
        run: |
          PUBLIC_DNS=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[*].Instances[*].PublicDnsName" --output text)
          echo "PUBLIC_DNS=${PUBLIC_DNS}" >> $GITHUB_ENV

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Add EC2 to known_hosts
        run: ssh-keyscan -H ${{ env.PUBLIC_DNS }} >> ~/.ssh/known_hosts

      - name: Run setup script for Flask app
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ env.PUBLIC_DNS }} << 'EOF'
          # Update the system and install required packages
          sudo yum update -y
          sudo amazon-linux-extras install nginx1
          sudo yum install python3 python3-devel git -y
          sudo yum install python3-pip -y

          # Install necessary Python packages
          pip3 install requests urllib3==1.26.16 flask gunicorn || { echo "Failed to install Flask and Gunicorn"; exit 1; }

          # Create application directory
          APP_DIR="/home/ec2-user/PokeAPI"
          if [ ! -d "$APP_DIR" ]; then
            git clone https://github.com/ChenBello/pokeAPI.git "$APP_DIR" || { echo "Failed to clone repository"; exit 1; }
          else
            cd "$APP_DIR" && git pull origin master || { echo "Failed to pull latest changes"; exit 1; }
          fi

          # Create systemd service
          sudo tee /etc/systemd/system/PokeAPI.service > /dev/null <<EOL
          [Unit]
          Description=PokeAPI service
          After=network.target
          
          [Service]
          User=ec2-user
          Group=ec2-user
          WorkingDirectory=$APP_DIR
          ExecStart=/usr/bin/gunicorn --workers 3 --bind unix:$APP_DIR/PokeAPI.sock app:app
          Restart=always
          
          [Install]
          WantedBy=multi-user.target
          EOL

          sudo systemctl daemon-reload
          sudo systemctl start PokeAPI || { echo "Failed to start PokeAPI service"; exit 1; }
          sudo systemctl enable PokeAPI

          # Configure Nginx
          sudo tee /etc/nginx/conf.d/PokeAPI.conf > /dev/null <<EOL
          server {
              listen 80;
              server_name ${{ env.PUBLIC_DNS }};
              location / {
                  proxy_pass http://unix:$APP_DIR/PokeAPI.sock;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
          }
          EOL

          # Check Nginx configuration
          sudo nginx -t || { echo "Nginx configuration failed"; exit 1; }
          sudo systemctl restart nginx || { echo "Failed to restart Nginx"; exit 1; }
          sudo systemctl enable nginx  
          sudo systemctl status nginx

          # Update .bashrc
          BASHRC="$HOME/.bashrc"

          # Uncomment if you want to add aliases or messages to .bashrc
          # if ! grep -q 'alias start_pokemon_app="python3 /home/ec2-user/PokeAPI/app.py"' "$BASHRC"; then
          #     echo 'alias start_pokemon_app="python3 /home/ec2-user/PokeAPI/app.py"' >> "$BASHRC"
          # fi

          # if ! grep -q "Welcome to the Pokémon app!" "$BASHRC"; then
          #     echo "Welcome to the Pokémon app! Type 'start_pokemon_app' to start drawing Pokémon." >> "$BASHRC"
          # fi

          # if ! grep -q "python3 /home/ec2-user/PokeAPI/apiHandling.py" "$BASHRC"; then
          #     echo "python3 /home/ec2-user/PokeAPI/apiHandling.py" >> "$BASHRC"
          # fi

          EOF

      - name: Test if the app is running
        run: |
          curl -I http://${{ env.PUBLIC_DNS }} | grep "200 OK" || echo "Failed to connect to the app"

